{"ast":null,"code":"import { createStore, compose, combineReducers, applyMiddleware } from 'redux';\nimport promise from 'redux-promise'; // 可以让 action 以异步的方式去写\n\nimport thunk from 'redux-thunk'; // action 函数方式写\n\nimport { persistReducer } from 'redux-persist'; // 合并 reduce\n\nimport storage from 'redux-persist/lib/storage'; // 创建 store\n// 多层对象 做数据持久化\n\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport fromData from '@/reducer/lx'; // 我要对哪些 reduce 的 state 做数据持久化\n\nconst rootPersistConfig = {\n  key: 'root',\n  storage,\n  stateReconciler: autoMergeLevel2,\n  // 白名单 [reducer 目录内的 reduce 文件名]\n  whitelist: ['']\n};\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // 抽离出一个需要持久化的公共 reduce\n\nconst myPersistReducer = persistReducer(rootPersistConfig, combineReducers({\n  lx,\n  form,\n  list\n})); // createStore(reduce, 中间件)\n\nconst store = createStore(myPersistReducer, composeEnhancers(applyMiddleware(thunk, promise)));\nexport { store };","map":{"version":3,"sources":["/Users/mac/Desktop/react/backstage/src/store.js"],"names":["createStore","compose","combineReducers","applyMiddleware","promise","thunk","persistReducer","storage","autoMergeLevel2","fromData","rootPersistConfig","key","stateReconciler","whitelist","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","myPersistReducer","lx","form","list","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAOC,OAAP,MAAoB,eAApB,C,CAAoC;;AACpC,OAAOC,KAAP,MAAkB,aAAlB,C,CAAgC;;AAChC,SAASC,cAAT,QAA+B,eAA/B,C,CAA+C;;AAC/C,OAAOC,OAAP,MAAoB,2BAApB,C,CAAgD;AAChD;;AACA,OAAOC,eAAP,MAA4B,mDAA5B;AACA,OAAOC,QAAP,MAAqB,cAArB,C,CAGA;;AACA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,GAAG,EAAE,MADmB;AAExBJ,EAAAA,OAFwB;AAGxBK,EAAAA,eAAe,EAAEJ,eAHO;AAIxB;AACAK,EAAAA,SAAS,EAAE,CAAC,EAAD;AALa,CAA1B;AAQA,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+Cf,OAAxE,C,CAEA;;AACA,MAAMgB,gBAAgB,GAAGX,cAAc,CACrCI,iBADqC,EAErCR,eAAe,CAAC;AACdgB,EAAAA,EADc;AAEdC,EAAAA,IAFc;AAGdC,EAAAA;AAHc,CAAD,CAFsB,CAAvC,C,CASA;;AACA,MAAMC,KAAK,GAAGrB,WAAW,CACvBiB,gBADuB,EAEvBH,gBAAgB,CAACX,eAAe,CAACE,KAAD,EAAQD,OAAR,CAAhB,CAFO,CAAzB;AAKA,SAASiB,KAAT","sourcesContent":["import { createStore, compose, combineReducers, applyMiddleware } from 'redux'\nimport promise from 'redux-promise' // 可以让 action 以异步的方式去写\nimport thunk from 'redux-thunk' // action 函数方式写\nimport { persistReducer } from 'redux-persist' // 合并 reduce\nimport storage from 'redux-persist/lib/storage' // 创建 store\n// 多层对象 做数据持久化\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2'\nimport fromData from '@/reducer/lx'\n\n\n// 我要对哪些 reduce 的 state 做数据持久化\nconst rootPersistConfig = {\n  key: 'root',\n  storage,\n  stateReconciler: autoMergeLevel2,\n  // 白名单 [reducer 目录内的 reduce 文件名]\n  whitelist: [''],  \n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n// 抽离出一个需要持久化的公共 reduce\nconst myPersistReducer = persistReducer(\n  rootPersistConfig,\n  combineReducers({\n    lx,\n    form,\n    list,\n  }\n))\n\n// createStore(reduce, 中间件)\nconst store = createStore(\n  myPersistReducer,\n  composeEnhancers(applyMiddleware(thunk, promise))\n)\n\nexport { store }"]},"metadata":{},"sourceType":"module"}